name: System Test
on:
  workflow_dispatch:
    inputs:
      releaseUrl:
        description: The URL to the release file
        required: true

jobs:

  create-runner:
    name: Create test runner
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: 3bit/setup-hcloud@v1

      - name: Check hcloud binary
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        run: hcloud version

      - name: Create runner
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.API_PAT }}
        run: |
          TOKEN=$(gh api -X POST repos/${{ github.repository }}/actions/runners/registration-token --template '{{ .token }}')

          sed "s/@@TOKEN@@/${TOKEN}/g" hcloud/cloud-init-fedora.yaml | \
          sed 's/@@RUNNER@@/${{github.run_id}}/g' > init.yaml

          cat init.yaml

          hcloud server create --name testing-runner-${{github.run_id}} --datacenter hel1-dc2 --image fedora-34 --type ccx12 --ssh-key 3746242 --user-data-from-file init.yaml

      - name: Waiting for runner to become ready
        id: runner
        timeout-minutes: 10
        env:
          GITHUB_TOKEN: ${{ secrets.API_PAT }}
        run: |

          ID=$(gh api repos/${{ github.repository }}/actions/runners --jq '.runners[] | select(.name=="testing-runner-${{github.run_id}}") | .id')
          while [[ -z "$ID" ]]; do
            sleep 10
            ID=$(gh api repos/${{ github.repository }}/actions/runners --jq '.runners[] | select(.name=="testing-runner-${{github.run_id}}") | .id')
          done

          echo ::set-output name=id::${ID}


  test:
    name: Run tests
    runs-on: [ "self-hosted", "hetzner" ]

    needs:
      - create-runner

    env:
      CLUSTER: "kind"

    steps:

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: |
          sudo dnf install gcc openssl-dev

      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add .local/bin to path
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install drg
        run: |
          curl -sL https://github.com/drogue-iot/drg/releases/download/v0.5.1/drg-0.5.1-linux-amd64.tar.gz -o drg.tar.gz
          tar --strip-components=1 -xvzf drg.tar.gz
          mv drg "$HOME/.local/bin"

      - name: Install geckodriver
        run: |
          curl -sL https://github.com/mozilla/geckodriver/releases/download/v0.29.1/geckodriver-v0.29.1-linux64.tar.gz -o geckodriver.tar.gz
          tar -xzvf geckodriver.tar.gz
          mv geckodriver "$HOME/.local/bin"

      - name: Install helm
        run: |
          curl -sL https://get.helm.sh/helm-v3.6.0-linux-amd64.tar.gz -o helm.tar.gz
          tar xzf helm.tar.gz
          mv linux-amd64/helm "$HOME/.local/bin"

      - name: Download release
        run: |
          mkdir release
          cd release
          curl -sL "${{ github.event.inputs.releaseUrl }}" -o release.zip
          unzip release.zip
          mv drogue-install-*/* .
          find .

      - name: Check for installer script
        run: |
          cd release
          test -x ./scripts/drgadm

      - name: Create Kind cluster
        uses: helm/kind-action@v1.1.0
        with:
          wait: 300s
          cluster_name: kind
          config: kind/cluster-config.yaml

      - name: Deploy Drogue
        env:
          DEBUG: "true"
        run: |
          cd release
          ./scripts/drgadm deploy -m
        timeout-minutes: 20

      - name: Run tests
        run: |
          make CLUSTER=kind HEADLESS=true

  destroy-runner:
    name: Destroy test runner
    needs:
      - create-runner
      - test
    runs-on: ubuntu-20.04
    if: ${{ always() }} # the runner must always be deleted
    steps:
      - uses: 3bit/setup-hcloud@v1

      - name: Check hcloud binary
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        run: hcloud version

      - name: Destroy runner
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        run: hcloud server delete testing-runner-${GITHUB_RUN_ID}

      - name: Remove runner
        if: ${{ always() }} # always remove
        env:
          GITHUB_TOKEN: ${{ secrets.API_PAT }}
        # Although we have the runner ID in the create step, it may be that there is race condition between
        # failing to detect the creation and destroying. So we try to find the runner now anyway.
        run: |
          for id in $(gh api repos/${{ github.repository }}/actions/runners --jq '.runners[] | select(.name=="testing-runner-${{github.run_id}}") | .id'); do
            echo "ID: $id"
            gh api -X DELETE repos/${{ github.repository }}/actions/runners/$id
          done
