name: System Test
on:
  workflow_dispatch:
    inputs:
      releaseUrl:
        description: The URL to the release file. An empty URL performs a build of 'main' first.
        required: false
      containerRegistry:
        description: The container registry prefix
        required: false
        default: ghcr.io/drogue-iot
      cluster:
        description: The cluster type
        default: kind
        required: true
      serverType:
        description: The server type to use (this value has a price attached!).
        default: ccx22
        required: true

jobs:

  create-runner:
    name: Create runner
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: 3bit/setup-hcloud@v1

      - name: Check hcloud binary
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        run: hcloud version

      - name: Create runner
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.API_PAT }}
        run: |
          RUNNER_URL=$(gh api repos/drogue-iot/drogue-cloud-testing/actions/runners/downloads --jq '.[] | select(.os=="linux" and .architecture=="x64") | .download_url')
          TOKEN=$(gh api -X POST repos/${{ github.repository }}/actions/runners/registration-token --template '{{ .token }}')
          echo ::add-mask::$TOKEN

          sed "s/@@TOKEN@@/${TOKEN}/g" hcloud/cloud-init-ubuntu.yaml | \
          sed "s|@@RUNNER_URL@@|${RUNNER_URL}|g" | \
          sed 's/@@RUNNER@@/${{github.run_id}}/g' > init.yaml

          cat init.yaml

          hcloud server create --name testing-runner-${{github.run_id}} --datacenter hel1-dc2 --image ubuntu-20.04 --type "${{github.event.inputs.serverType}}" --ssh-key 3746242 --user-data-from-file init.yaml

      - name: Waiting for runner to become ready
        id: runner
        timeout-minutes: 10
        env:
          GITHUB_TOKEN: ${{ secrets.API_PAT }}
        run: |

          ID=$(gh api repos/${{ github.repository }}/actions/runners --jq '.runners[]? | select(.name=="testing-runner-${{github.run_id}}") | .id')
          while [[ -z "$ID" ]]; do
            sleep 10
            ID=$(gh api repos/${{ github.repository }}/actions/runners --jq '.runners[]? | select(.name=="testing-runner-${{github.run_id}}") | .id')
          done

          echo ::set-output name=id::${ID}


  test:
    name: Run tests
    runs-on: [ "self-hosted", "hetzner" ]

    needs:
      - create-runner

    env:
      CLUSTER: ${{ github.event.inputs.cluster }}

    steps:

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: |
          sudo apt-get -y install gcc libssl-dev make httpie xvfb

      - run: env | sort

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add .local/bin to path
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install drg
        run: |
          curl -sL https://github.com/drogue-iot/drg/releases/download/v0.5.1/drg-0.5.1-linux-amd64.tar.gz -o drg.tar.gz
          tar --strip-components=1 -xvzf drg.tar.gz
          mv drg "$HOME/.local/bin"

      - name: Install geckodriver
        run: |
          curl -sL https://github.com/mozilla/geckodriver/releases/download/v0.29.1/geckodriver-v0.29.1-linux64.tar.gz -o geckodriver.tar.gz
          tar -xzvf geckodriver.tar.gz
          mv geckodriver "$HOME/.local/bin"

      - name: Install helm
        run: |
          curl -sL https://get.helm.sh/helm-v3.6.0-linux-amd64.tar.gz -o helm.tar.gz
          tar xzf helm.tar.gz
          mv linux-amd64/helm "$HOME/.local/bin"

      - name: Install kubectl
        run: |
          curl -sL https://dl.k8s.io/release/v1.21.1/bin/linux/amd64/kubectl -o "$HOME/.local/bin/kubectl"
          chmod a+x "$HOME/.local/bin/kubectl"

      - name: Install Minikube
        if: ${{ github.event.inputs.cluster == 'minikube' }}
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/bin/minikube

      - name: Install cargo2junit
        run: |
          cargo install --force cargo2junit

      # get the content to test

      - name: Download release
        if: ${{ github.event.inputs.releaseUrl != '' }}
        run: |
          mkdir release
          cd release
          curl -sL "${{ github.event.inputs.releaseUrl }}" -o release.zip
          unzip release.zip
          mv drogue-install-*/* .
          find .

      - uses: actions/cache@v2
        if: ${{ github.event.inputs.releaseUrl == '' }}
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            drogue-cloud/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/drogue-cloud/Cargo.lock') }}

      - name: Perform a local build
        if: ${{ github.event.inputs.releaseUrl == '' }}
        run: |
          git version

          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          git clone https://github.com/drogue-iot/drogue-cloud

          cd drogue-cloud

          git config --file=.gitmodules submodule."helm-charts".url https://github.com/drogue-iot/drogue-cloud-helm-charts.git
          git submodule sync
          git submodule update --init

          make build build-images
          make tag-images CONTAINER_REGISTRY=dev.local IMAGE_TAG=${{ github.run_id }}
          make -C installer

          cd ..

          mkdir release
          cd release
          ls ../drogue-cloud/installer/build
          tar  --strip-components=1 -xvzf ../drogue-cloud/installer/build/drogue-install-${{ github.event.inputs.cluster }}-latest.tar.gz
          cd ..

      - name: Check for installer script
        run: |
          cd release
          test -x ./scripts/drgadm

      # start the cluster

      - name: Create Kind cluster
        if: ${{ github.event.inputs.cluster == 'kind' }}
        uses: helm/kind-action@v1.2.0
        with:
          wait: 300s
          cluster_name: kind
          config: kind/cluster-config.yaml

      - name: Load images in kind
        if: ${{ ( github.event.inputs.releaseUrl == '' ) && ( github.event.inputs.cluster == 'kind' ) }}
        run: make -C drogue-cloud kind-load CONTAINER_REGISTRY=dev.local IMAGE_TAG=${{ github.run_id }}

      - name: Create Minikube cluster
        if: ${{ github.event.inputs.cluster == 'minikube' }}
        run: |
          minikube config set driver kvm2
          # the "start" call should align with what we have in the defaults
          minikube start --cpus 4 --memory 14336 --disk-size 20gb --addons ingress
          sudo minikube tunnel &

      # Start deployment

      - name: Deploy Drogue (release build)
        if: ${{ github.event.inputs.releaseUrl != '' }}
        env:
          DEBUG: "true"
        run: |
          cd release
          ./scripts/drgadm deploy \
            -s defaults.images.repository=${{ github.event.inputs.containerRegistry }}
        timeout-minutes: 20

      - name: Deploy drogue (local build)
        if: ${{ github.event.inputs.releaseUrl == '' }}
        env:
          TEST_CERTS_IMAGE: "dev.local/test-cert-generator:${{ github.run_id }}"
        run: |
          cd release
          ./scripts/drgadm deploy \
            -m \
            -s defaults.images.repository=dev.local \
            --set-string defaults.images.tag=${{ github.run_id }} \
            -s defaults.images.pullPolicy=Never
        timeout-minutes: 20

      # Run tests

      - name: Run tests
        run: |
          xvfb-run --auto-servernum make -s test TEST_ARGS="-Z unstable-options --format json --report-time" CLUSTER=${{ github.event.inputs.cluster }} CERT_BASE="release/build/certs" | tee test-output.json

      - name: Convert test data
        if: always()
        run: |
          cat test-output.json | cargo2junit > results.xml

      - name: Upload test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: results.xml

      - name: Upload raw test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-output
          path: |
            results.xml
            test-output.json

      - name: Collect logs
        if: failure()
        run: |
          mkdir logs
          sudo journalctl > logs/journal.log
          ./.github/scripts/collect_logs.sh logs/ drogue-iot

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: logs

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: screenshots

  destroy-runner:
    name: Destroy runner
    needs:
      - create-runner
      - test
    runs-on: ubuntu-20.04
    if: ${{ always() }} # the runner must always be deleted
    steps:
      - uses: 3bit/setup-hcloud@v1

      - name: Check hcloud binary
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        run: hcloud version

      - name: Destroy runner
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        run: hcloud server delete testing-runner-${GITHUB_RUN_ID}

      - name: Remove runner
        if: ${{ always() }} # always remove
        env:
          GITHUB_TOKEN: ${{ secrets.API_PAT }}
        # Although we have the runner ID in the create step, it may be that there is race condition between
        # failing to detect the creation and destroying. So we try to find the runner now anyway.
        run: |
          for id in $(gh api repos/${{ github.repository }}/actions/runners --jq '.runners[] | select(.name=="testing-runner-${{github.run_id}}") | .id'); do
            echo "ID: $id"
            gh api -X DELETE repos/${{ github.repository }}/actions/runners/$id
          done
